#ifndef TC_GENERATED_OFFSETS_H
#define TC_GENERATED_OFFSETS_H

// Generated by dumper.cc
// Date: Mar 24 2025
// Time: 14:59:02

#include "offsets_generated_prerequisite.h"

namespace tc {
    namespace offsets {
        namespace lua {
            inline uint64_t lua_newstate = 0x5850a0;
        }

        namespace script_core {
            inline uint64_t ctor = 0x3dd040;
            inline uint64_t registerLuaFunctions = 0x4095c0;
            inline uint64_t loadScript = 0x407ee0;
            inline uint64_t destroy = 0x36210;
        }

        namespace script {
            inline uint64_t ctor = 0x3dbde0;
        }

        namespace game {
            inline uint64_t log = 0x5ecc90;
        }

        namespace teardown {
            inline uint64_t initialize = 0x5ff50;
            inline uint64_t update = 0x65e50;
        }

        namespace registry {
            inline uint64_t getInt = 0x3d2c30;
            inline uint64_t getFloat = 0x3d2be0;
            inline uint64_t getString = 0x3d2f40;
            inline uint64_t getBool = 0x3d2b30;
            inline uint64_t setBool = 0x3d41e0;
            inline uint64_t setString = 0x3d4340;
            inline uint64_t hasKey = 0x3d35a0;
            inline uint64_t clearKey = 0x3d2470;
        }

        namespace renderer {
            inline uint64_t createDXGIFactory1 = 0x611fe5;
            inline uint64_t initializeForAPI = 0x538540;
        }

        namespace string {
            inline uint64_t free = 0x466ca0;
            inline uint64_t fromCStr = 0x466b30;
        }

        namespace mem {
            inline uint64_t free = 0x4650e0;
            inline uint64_t alloc = 0x465050;
            inline uint64_t allocAligned = 0x464ff0;
        }

        inline bool generate(std::vector<std::string>& failedOffsets) {
            console::writeln("Function Addresses:");

            SET_AND_CHECK_OFFSET(lua::lua_newstate, "lua::lua_newstate");
            SET_AND_CHECK_OFFSET(script_core::ctor, "script_core::ctor");
            SET_AND_CHECK_OFFSET(script_core::registerLuaFunctions, "script_core::registerLuaFunctions");
            SET_AND_CHECK_OFFSET(script_core::loadScript, "script_core::loadScript");
            SET_AND_CHECK_OFFSET(script_core::destroy, "script_core::destroy");
            SET_AND_CHECK_OFFSET(script::ctor, "script::ctor");
            SET_AND_CHECK_OFFSET(game::log, "game::log");
            SET_AND_CHECK_OFFSET(teardown::initialize, "teardown::initialize");
            SET_AND_CHECK_OFFSET(teardown::update, "teardown::update");
            SET_AND_CHECK_OFFSET(registry::getInt, "registry::getInt");
            SET_AND_CHECK_OFFSET(registry::getFloat, "registry::getFloat");
            SET_AND_CHECK_OFFSET(registry::getString, "registry::getString");
            SET_AND_CHECK_OFFSET(registry::getBool, "registry::getBool");
            SET_AND_CHECK_OFFSET(registry::setBool, "registry::setBool");
            SET_AND_CHECK_OFFSET(registry::setString, "registry::setString");
            SET_AND_CHECK_OFFSET(registry::hasKey, "registry::hasKey");
            SET_AND_CHECK_OFFSET(registry::clearKey, "registry::clearKey");
            SET_AND_CHECK_OFFSET(renderer::createDXGIFactory1, "renderer::createDXGIFactory1");
            SET_AND_CHECK_OFFSET(renderer::initializeForAPI, "renderer::initializeForAPI");
            SET_AND_CHECK_OFFSET(string::free, "string::free");
            SET_AND_CHECK_OFFSET(string::fromCStr, "string::fromCStr");
            SET_AND_CHECK_OFFSET(mem::free, "mem::free");
            SET_AND_CHECK_OFFSET(mem::alloc, "mem::alloc");
            SET_AND_CHECK_OFFSET(mem::allocAligned, "mem::allocAligned");

            return failedOffsets.size() == 0;
        }
    }

    namespace funcs {
        namespace types {
            namespace lua {
                using tlua_newstate = std::add_pointer_t<lua_State* (lua_Alloc f, void* ud)>;
            }

            namespace script_core {
                using tctor = std::add_pointer_t<td::script_core_t* (td::script_core_t* scriptCore)>;
                using tregisterLuaFunctions = std::add_pointer_t<void(td::script_core_t* scriptCore)>;
                using tloadScript = std::add_pointer_t<void(td::script_core_t* scriptCore, td::td_string name)>;
                using tdestroy = std::add_pointer_t<void(td::script_core_t* scriptCore, char a2)>;
            }

            namespace script {
                using tctor = std::add_pointer_t<tc::teardown::types::script_t* (tc::teardown::types::script_t* script, bool entityThing)>;
            }

            namespace game {
                using tlog = std::add_pointer_t<void(tc::teardown::types::log_level level, const char* fmt, ...)>;
            }

            namespace teardown {
                using tinitialize = std::add_pointer_t<tc::teardown::types::game_t* (tc::teardown::types::game_t* game, DWORD** a2, int64_t a3)>;
                using tupdate = std::add_pointer_t<tc::teardown::types::game_t* (tc::teardown::types::game_t* game, void* input)>;
            }

            namespace registry {
                using tgetInt = std::add_pointer_t<int(void* registry, td::td_string str)>;
                using tgetFloat = std::add_pointer_t<float(void* registry, td::td_string str)>;
                using tgetString = std::add_pointer_t<td::td_string* (void* registry, td::td_string* out, td::td_string* name)>;
                using tgetBool = std::add_pointer_t<bool(void* registry, td::td_string str)>;
                using tsetBool = std::add_pointer_t<void(void* registry, td::td_string* str, bool value)>;
                using tsetString = std::add_pointer_t<void(void* registry, td::td_string* str, td::td_string* value)>;
                using thasKey = std::add_pointer_t<bool(void* registry, td::td_string* str)>;
                using tclearKey = std::add_pointer_t<void(void* registry, td::td_string* str)>;
            }

            namespace renderer {
                using tcreateDXGIFactory1 = std::add_pointer_t<HRESULT __stdcall(const IID* const riid, void** ppFactory)>;
                using tinitializeForAPI = std::add_pointer_t<DWORD* __fastcall(DWORD* a1, int* a2)>;
            }

            namespace string {
                using tfree = std::add_pointer_t<void(td::td_string* str)>;
                using tfromCStr = std::add_pointer_t<td::td_string* (td::td_string* str, const char* from)>;
            }

            namespace mem {
                using tfree = std::add_pointer_t<void(void* block)>;
                using talloc = std::add_pointer_t<void* (size_t size)>;
                using tallocAligned = std::add_pointer_t<void* (size_t size, size_t alignment)>;
            }

        }

        namespace lua {
            inline types::lua::tlua_newstate lua_newstate = nullptr;
        }

        namespace script_core {
            inline types::script_core::tctor ctor = nullptr;
            inline types::script_core::tregisterLuaFunctions registerLuaFunctions = nullptr;
            inline types::script_core::tloadScript loadScript = nullptr;
            inline types::script_core::tdestroy destroy = nullptr;
        }

        namespace script {
            inline types::script::tctor ctor = nullptr;
        }

        namespace game {
            inline types::game::tlog log = nullptr;
        }

        namespace teardown {
            inline types::teardown::tinitialize initialize = nullptr;
            inline types::teardown::tupdate update = nullptr;
        }

        namespace registry {
            inline types::registry::tgetInt getInt = nullptr;
            inline types::registry::tgetFloat getFloat = nullptr;
            inline types::registry::tgetString getString = nullptr;
            inline types::registry::tgetBool getBool = nullptr;
            inline types::registry::tsetBool setBool = nullptr;
            inline types::registry::tsetString setString = nullptr;
            inline types::registry::thasKey hasKey = nullptr;
            inline types::registry::tclearKey clearKey = nullptr;
        }

        namespace renderer {
            inline types::renderer::tcreateDXGIFactory1 createDXGIFactory1 = nullptr;
            inline types::renderer::tinitializeForAPI initializeForAPI = nullptr;
        }

        namespace string {
            inline types::string::tfree free = nullptr;
            inline types::string::tfromCStr fromCStr = nullptr;
        }

        namespace mem {
            inline types::mem::tfree free = nullptr;
            inline types::mem::talloc alloc = nullptr;
            inline types::mem::tallocAligned allocAligned = nullptr;
        }


        inline bool assign() {
            console::writeln("Assigning functions");

            ASSIGN_FUNCTION(lua, lua_newstate);
            ASSIGN_FUNCTION(script_core, ctor);
            ASSIGN_FUNCTION(script_core, registerLuaFunctions);
            ASSIGN_FUNCTION(script_core, loadScript);
            ASSIGN_FUNCTION(script_core, destroy);
            ASSIGN_FUNCTION(script, ctor);
            ASSIGN_FUNCTION(game, log);
            ASSIGN_FUNCTION(teardown, initialize);
            ASSIGN_FUNCTION(teardown, update);
            ASSIGN_FUNCTION(registry, getInt);
            ASSIGN_FUNCTION(registry, getFloat);
            ASSIGN_FUNCTION(registry, getString);
            ASSIGN_FUNCTION(registry, getBool);
            ASSIGN_FUNCTION(registry, setBool);
            ASSIGN_FUNCTION(registry, setString);
            ASSIGN_FUNCTION(registry, hasKey);
            ASSIGN_FUNCTION(registry, clearKey);
            ASSIGN_FUNCTION(renderer, createDXGIFactory1);
            ASSIGN_FUNCTION(renderer, initializeForAPI);
            ASSIGN_FUNCTION(string, free);
            ASSIGN_FUNCTION(string, fromCStr);
            ASSIGN_FUNCTION(mem, free);
            ASSIGN_FUNCTION(mem, alloc);
            ASSIGN_FUNCTION(mem, allocAligned);

            return true;
        }
    }

    namespace lua_funcs {
        namespace parameters {
            DECLARE_GAME_LUA_FUNCTION(GetIntParam, 0x40e370);
            DECLARE_GAME_LUA_FUNCTION(GetFloatParam, 0x40e210);
            DECLARE_GAME_LUA_FUNCTION(GetBoolParam, 0x40dbd0);
            DECLARE_GAME_LUA_FUNCTION(GetStringParam, 0x40e4e0);
            DECLARE_GAME_LUA_FUNCTION(GetColorParam, 0x40ddd0);
        }
        namespace scriptControl {
            DECLARE_GAME_LUA_FUNCTION(GetVersion, 0x40e780);
            DECLARE_GAME_LUA_FUNCTION(HasVersion, 0x40e9f0);
            DECLARE_GAME_LUA_FUNCTION(GetTime, 0x40e590);
            DECLARE_GAME_LUA_FUNCTION(GetTimeStep, 0x40e5a0);
            DECLARE_GAME_LUA_FUNCTION(InputLastPressedKey, 0x40ed80);
            DECLARE_GAME_LUA_FUNCTION(InputPressed, 0x40ee20);
            DECLARE_GAME_LUA_FUNCTION(InputReleased, 0x40efd0);
            DECLARE_GAME_LUA_FUNCTION(InputDown, 0x40ebd0);
            DECLARE_GAME_LUA_FUNCTION(InputValue, 0x40f1c0);
            DECLARE_GAME_LUA_FUNCTION(InputClear, 0x40ebc0);
            DECLARE_GAME_LUA_FUNCTION(InputResetOnTransition, 0x40f180);
            DECLARE_GAME_LUA_FUNCTION(LastInputDevice, 0x40fa50);
            DECLARE_GAME_LUA_FUNCTION(SetValue, 0x410a10);
            DECLARE_GAME_LUA_FUNCTION(SetValueInTable, 0x410a10);
            DECLARE_GAME_LUA_FUNCTION(PauseMenuButton, 0x40fc20);
            DECLARE_GAME_LUA_FUNCTION(HasFile, 0x40e790);
            DECLARE_GAME_LUA_FUNCTION(StartLevel, 0x410cb0);
            DECLARE_GAME_LUA_FUNCTION(SetPaused, 0x410560);
            DECLARE_GAME_LUA_FUNCTION(Restart, 0x40ff20);
            DECLARE_GAME_LUA_FUNCTION(Menu, 0x7ff6491dbe60);
        }
        namespace entity {
            DECLARE_GAME_LUA_FUNCTION(FindEntity, 0x3e45d0);
            DECLARE_GAME_LUA_FUNCTION(FindEntities, 0x3e4480);
            DECLARE_GAME_LUA_FUNCTION(GetEntityChildren, 0x3e6b20);
            DECLARE_GAME_LUA_FUNCTION(GetEntityParent, 0x3e6d90);
            DECLARE_GAME_LUA_FUNCTION(SetTag, 0x3fd7a0);
            DECLARE_GAME_LUA_FUNCTION(RemoveTag, 0x7ff6492157d5);
            DECLARE_GAME_LUA_FUNCTION(HasTag, 0x7ff6492177cc);
            DECLARE_GAME_LUA_FUNCTION(GetTagValue, 0x3ec130);
            DECLARE_GAME_LUA_FUNCTION(ListTags, 0x3efc10);
            DECLARE_GAME_LUA_FUNCTION(GetDescription, 0x3e6990);
            DECLARE_GAME_LUA_FUNCTION(SetDescription, 0x3f8d00);
            DECLARE_GAME_LUA_FUNCTION(Delete, 0x3e1000);
            DECLARE_GAME_LUA_FUNCTION(IsHandleValid, 0x3ee2c0);
            DECLARE_GAME_LUA_FUNCTION(GetEntityType, 0x3e6e60);
            DECLARE_GAME_LUA_FUNCTION(GetProperty, 0x3e9df0);
            DECLARE_GAME_LUA_FUNCTION(SetProperty, 0x3fbe20);
        }
        namespace body {
            DECLARE_GAME_LUA_FUNCTION(FindBody, 0x3e4470);
            DECLARE_GAME_LUA_FUNCTION(FindBodies, 0x3e4460);
            DECLARE_GAME_LUA_FUNCTION(GetBodyTransform, 0x3e5f10);
            DECLARE_GAME_LUA_FUNCTION(SetBodyTransform, 0x3f8190);
            DECLARE_GAME_LUA_FUNCTION(GetBodyMass, 0x3e5da0);
            DECLARE_GAME_LUA_FUNCTION(IsBodyDynamic, 0x3edd80);
            DECLARE_GAME_LUA_FUNCTION(SetBodyDynamic, 0x3f80f0);
            DECLARE_GAME_LUA_FUNCTION(SetBodyVelocity, 0x3f8390);
            DECLARE_GAME_LUA_FUNCTION(GetBodyVelocity, 0x3e60d0);
            DECLARE_GAME_LUA_FUNCTION(GetBodyVelocityAtPos, 0x3e6170);
            DECLARE_GAME_LUA_FUNCTION(SetBodyAngularVelocity, 0x3f8020);
            DECLARE_GAME_LUA_FUNCTION(GetBodyAngularVelocity, 0x3e57e0);
            DECLARE_GAME_LUA_FUNCTION(IsBodyActive, 0x3edc20);
            DECLARE_GAME_LUA_FUNCTION(SetBodyActive, 0x3f7f60);
            DECLARE_GAME_LUA_FUNCTION(ApplyBodyImpulse, 0x3df2e0);
            DECLARE_GAME_LUA_FUNCTION(GetBodyShapes, 0x3e5e20);
            DECLARE_GAME_LUA_FUNCTION(GetBodyVehicle, 0x3e6050);
            DECLARE_GAME_LUA_FUNCTION(GetBodyBounds, 0x3e5880);
            DECLARE_GAME_LUA_FUNCTION(GetBodyCenterOfMass, 0x3e5970);
            DECLARE_GAME_LUA_FUNCTION(IsBodyVisible, 0x3ee000);
            DECLARE_GAME_LUA_FUNCTION(IsBodyBroken, 0x3edca0);
            DECLARE_GAME_LUA_FUNCTION(IsBodyJointedToStatic, 0x3edf90);
            DECLARE_GAME_LUA_FUNCTION(DrawBodyOutline, 0x3e1710);
            DECLARE_GAME_LUA_FUNCTION(DrawBodyHighlight, 0x3e1610);
            DECLARE_GAME_LUA_FUNCTION(GetBodyClosestPoint, 0x3e5a10);
            DECLARE_GAME_LUA_FUNCTION(ConstrainVelocity, 0x3dfc80);
            DECLARE_GAME_LUA_FUNCTION(ConstrainAngularVelocity, 0x3df6d0);
            DECLARE_GAME_LUA_FUNCTION(ConstrainPosition, 0x3dfb00);
            DECLARE_GAME_LUA_FUNCTION(ConstrainOrientation, 0x3df990);
            DECLARE_GAME_LUA_FUNCTION(GetWorldBody, 0x3edad0);
        }
        namespace player {
            DECLARE_GAME_LUA_FUNCTION(GetPlayerPos, 0x3e9360);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerTransform, 0x3e97e0);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerTransform, 0x3fb790);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerGroundVelocity, 0x3fad40);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerCameraTransform, 0x3e8c20);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerCameraOffsetTransform, 0x3fab20);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerSpawnTransform, 0x3fb600);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerSpawnHealth, 0x3fb570);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerSpawnTool, 0x3fb5b0);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerVelocity, 0x3e9ac0);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerVehicle, 0x3fb920);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerVelocity, 0x3fb9a0);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerVehicle, 0x3e9a90);
            DECLARE_GAME_LUA_FUNCTION(IsPlayerGrounded, 0x3ee420);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerGrabShape, 0x3e8f70);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerGrabBody, 0x3e8e20);
            DECLARE_GAME_LUA_FUNCTION(ReleasePlayerGrab, 0x3f4230);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerPickShape, 0x3e9300);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerPickBody, 0x3e92c0);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerInteractShape, 0x3e9010);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerInteractBody, 0x3e8fc0);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerScreen, 0x3fb4e0);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerScreen, 0x3e9730);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerHealth, 0x3fada0);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerHealth, 0x3e8fa0);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerRegenerationState, 0x3fb100);
            DECLARE_GAME_LUA_FUNCTION(RespawnPlayer, 0x3f4670);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerWalkingSpeed, 0x3e9af0);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerWalkingSpeed, 0x3fba00);
            DECLARE_GAME_LUA_FUNCTION(GetPlayerParam, 0x3e9050);
            DECLARE_GAME_LUA_FUNCTION(SetPlayerParam, 0x3fae20);
            DECLARE_GAME_LUA_FUNCTION(RegisterTool, 0x3f3fe0);
            DECLARE_GAME_LUA_FUNCTION(GetToolBody, 0x3ec1f0);
            DECLARE_GAME_LUA_FUNCTION(SetToolTransform, 0x3fdce0);
        }


        inline bool assign() {
            UPDATE_GAME_LUA_FUNCTION(parameters::GetIntParam);
            UPDATE_GAME_LUA_FUNCTION(parameters::GetFloatParam);
            UPDATE_GAME_LUA_FUNCTION(parameters::GetBoolParam);
            UPDATE_GAME_LUA_FUNCTION(parameters::GetStringParam);
            UPDATE_GAME_LUA_FUNCTION(parameters::GetColorParam);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::GetVersion);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::HasVersion);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::GetTime);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::GetTimeStep);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::InputLastPressedKey);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::InputPressed);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::InputReleased);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::InputDown);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::InputValue);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::InputClear);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::InputResetOnTransition);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::LastInputDevice);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::SetValue);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::SetValueInTable);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::PauseMenuButton);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::HasFile);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::StartLevel);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::SetPaused);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::Restart);
            UPDATE_GAME_LUA_FUNCTION(scriptControl::Menu);
            UPDATE_GAME_LUA_FUNCTION(entity::FindEntity);
            UPDATE_GAME_LUA_FUNCTION(entity::FindEntities);
            UPDATE_GAME_LUA_FUNCTION(entity::GetEntityChildren);
            UPDATE_GAME_LUA_FUNCTION(entity::GetEntityParent);
            UPDATE_GAME_LUA_FUNCTION(entity::SetTag);
            UPDATE_GAME_LUA_FUNCTION(entity::RemoveTag);
            UPDATE_GAME_LUA_FUNCTION(entity::HasTag);
            UPDATE_GAME_LUA_FUNCTION(entity::GetTagValue);
            UPDATE_GAME_LUA_FUNCTION(entity::ListTags);
            UPDATE_GAME_LUA_FUNCTION(entity::GetDescription);
            UPDATE_GAME_LUA_FUNCTION(entity::SetDescription);
            UPDATE_GAME_LUA_FUNCTION(entity::Delete);
            UPDATE_GAME_LUA_FUNCTION(entity::IsHandleValid);
            UPDATE_GAME_LUA_FUNCTION(entity::GetEntityType);
            UPDATE_GAME_LUA_FUNCTION(entity::GetProperty);
            UPDATE_GAME_LUA_FUNCTION(entity::SetProperty);
            UPDATE_GAME_LUA_FUNCTION(body::FindBody);
            UPDATE_GAME_LUA_FUNCTION(body::FindBodies);
            UPDATE_GAME_LUA_FUNCTION(body::GetBodyTransform);
            UPDATE_GAME_LUA_FUNCTION(body::SetBodyTransform);
            UPDATE_GAME_LUA_FUNCTION(body::GetBodyMass);
            UPDATE_GAME_LUA_FUNCTION(body::IsBodyDynamic);
            UPDATE_GAME_LUA_FUNCTION(body::SetBodyDynamic);
            UPDATE_GAME_LUA_FUNCTION(body::SetBodyVelocity);
            UPDATE_GAME_LUA_FUNCTION(body::GetBodyVelocity);
            UPDATE_GAME_LUA_FUNCTION(body::GetBodyVelocityAtPos);
            UPDATE_GAME_LUA_FUNCTION(body::SetBodyAngularVelocity);
            UPDATE_GAME_LUA_FUNCTION(body::GetBodyAngularVelocity);
            UPDATE_GAME_LUA_FUNCTION(body::IsBodyActive);
            UPDATE_GAME_LUA_FUNCTION(body::SetBodyActive);
            UPDATE_GAME_LUA_FUNCTION(body::ApplyBodyImpulse);
            UPDATE_GAME_LUA_FUNCTION(body::GetBodyShapes);
            UPDATE_GAME_LUA_FUNCTION(body::GetBodyVehicle);
            UPDATE_GAME_LUA_FUNCTION(body::GetBodyBounds);
            UPDATE_GAME_LUA_FUNCTION(body::GetBodyCenterOfMass);
            UPDATE_GAME_LUA_FUNCTION(body::IsBodyVisible);
            UPDATE_GAME_LUA_FUNCTION(body::IsBodyBroken);
            UPDATE_GAME_LUA_FUNCTION(body::IsBodyJointedToStatic);
            UPDATE_GAME_LUA_FUNCTION(body::DrawBodyOutline);
            UPDATE_GAME_LUA_FUNCTION(body::DrawBodyHighlight);
            UPDATE_GAME_LUA_FUNCTION(body::GetBodyClosestPoint);
            UPDATE_GAME_LUA_FUNCTION(body::ConstrainVelocity);
            UPDATE_GAME_LUA_FUNCTION(body::ConstrainAngularVelocity);
            UPDATE_GAME_LUA_FUNCTION(body::ConstrainPosition);
            UPDATE_GAME_LUA_FUNCTION(body::ConstrainOrientation);
            UPDATE_GAME_LUA_FUNCTION(body::GetWorldBody);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerPos);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerTransform);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerTransform);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerGroundVelocity);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerCameraTransform);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerCameraOffsetTransform);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerSpawnTransform);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerSpawnHealth);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerSpawnTool);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerVelocity);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerVehicle);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerVelocity);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerVehicle);
            UPDATE_GAME_LUA_FUNCTION(player::IsPlayerGrounded);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerGrabShape);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerGrabBody);
            UPDATE_GAME_LUA_FUNCTION(player::ReleasePlayerGrab);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerPickShape);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerPickBody);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerInteractShape);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerInteractBody);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerScreen);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerScreen);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerHealth);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerHealth);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerRegenerationState);
            UPDATE_GAME_LUA_FUNCTION(player::RespawnPlayer);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerWalkingSpeed);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerWalkingSpeed);
            UPDATE_GAME_LUA_FUNCTION(player::GetPlayerParam);
            UPDATE_GAME_LUA_FUNCTION(player::SetPlayerParam);
            UPDATE_GAME_LUA_FUNCTION(player::RegisterTool);
            UPDATE_GAME_LUA_FUNCTION(player::GetToolBody);
            UPDATE_GAME_LUA_FUNCTION(player::SetToolTransform);

            return true;
        }
    }
}

#endif // TC_GENERATED_OFFSETS_H